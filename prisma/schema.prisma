generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  password           String
  name               String?
  role               String       @default("SELLER")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  locationId         String?
  distributorId      String?
  distributorProfile Distributor? @relation("DistributorUser")
  locationProfile    Location?    @relation("LocationUser")
  sellerConfigs      QRConfig?    @relation("SellerConfig")
  accounts           Account[]
  qrCodes            QRCode[]
  sessions           Session[]
  location           Location?    @relation("LocationSellers", fields: [locationId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model QRConfig {
  id                    String   @id @default(cuid())
  sellerId              String   @unique
  sendMethod            String   @default("URL")
  landingPageRequired   Boolean  @default(true)
  allowCustomGuestsDays Boolean  @default(false)
  defaultGuests         Int      @default(2)
  defaultDays           Int      @default(3)
  pricingType           String   @default("FIXED")
  fixedPrice            Float?
  sendRebuyEmail        Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  seller                User     @relation("SellerConfig", fields: [sellerId], references: [id], onDelete: Cascade)
}

model QRCode {
  id         String   @id @default(cuid())
  code       String   @unique
  sellerId   String
  guests     Int      @default(2)
  days       Int      @default(3)
  cost       Float    @default(0.0)
  expiresAt  DateTime
  isActive   Boolean  @default(true)
  landingUrl String?
  createdAt  DateTime @default(now())
  seller     User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  scans      QRScan[]

  @@map("qr_codes")
}

model QRScan {
  id        String   @id @default(cuid())
  qrCodeId  String
  scannedAt DateTime @default(now())
  location  String?
  business  String?
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@map("qr_scans")
}

model Distributor {
  id            String     @id @default(cuid())
  name          String
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String     @unique
  contactPerson String?
  email         String?
  notes         String?
  telephone     String?
  user          User       @relation("DistributorUser", fields: [userId], references: [id], onDelete: Cascade)
  locations     Location[] @relation("DistributorLocations")
}

model Location {
  id            String      @id @default(cuid())
  name          String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distributorId String
  userId        String      @unique
  contactPerson String?
  email         String?
  notes         String?
  telephone     String?
  distributor   Distributor @relation("DistributorLocations", fields: [distributorId], references: [id], onDelete: Cascade)
  user          User        @relation("LocationUser", fields: [userId], references: [id], onDelete: Cascade)
  sellers       User[]      @relation("LocationSellers")
}
